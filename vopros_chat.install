<?php

/**
 * @file
 * Install, update and uninstall functions for the vopros_chat module.
 */

/**
 * Implements hook_install().
 *
 * Generate a service key for NodeJS if we don't already have one.
 */
function vopros_chat_install() {
  // Generate a service key for NodeJS if we don't already have one.
  if (!variable_get('nodejs_service_key', FALSE)) {
    variable_set('nodejs_service_key', drupal_random_key());
  }
}

/**
 * Implements hook_uninstall().
 *
 * Delete configuration variables.
 */
function vopros_chat_uninstall() {
  variable_del('vopros_chat_closed_message');
}

/**
 * Implements hook_enable().
 *
 * Add chat question filter to filter list on overridden views. Unmodified views
 * will be handled by hook_views_default_views_alter()
 *
 * @see vopros_chat_views_default_views_alter()
 */
function vopros_chat_enable() {
  $view = views_get_view('vopros_question_list');

  // If the view is overridden (stored in the database - vid is a number) we
  // need to add the filter to it.
  if (!empty($view) && is_numeric($view->vid)) {
    $filter = array(
      'operator' => '!=',
      'value' => 'chat',
    );

    // Add filter to all displays of the view.
    foreach ($view->display as $display) {
      $view->add_item($display->display_plugin, 'filter', 'vopros_question', 'user_answer_preference', $filter, 'vopros_chat_filter');
    }
    $view->save();
  }
}

/**
 * Implements hook_disable().
 *
 * Remove chat question filter to filter list from overridden views.
 */
function vopros_chat_disable() {
  $view = views_get_view('vopros_question_list');

  // If the view is overridden (stored in the database - vid is a number) we
  // need to remove the filter from it.
  if (!empty($view) && is_numeric($view->vid)) {
    foreach ($view->display as $display) {
      $view->set_item($display->display_plugin, 'filter', 'vopros_chat_filter', NULL);
    }
    $view->save();
  }
}

/**
 * Implements hook_schema().
 */
function vopros_chat_schema() {
  $schema = array(
    'vopros_chat_log' => array(
      'description' => 'Chat logs',
      'fields' => array(
        'timestamp' => array(
          'description' => 'Timestamp when the entry was logged.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'question_id' => array(
          'description' => 'UID of the logger',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'UID of the logger',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'name' => array(
          'description' => 'Name of the logger',
          'type' => 'varchar',
          'length' => 256,
          'not null' => TRUE,
        ),
        'session_id' => array(
          'description' => 'Session ID of the chat',
          'type' => 'varchar',
          'length' => 256,
          'not null' => TRUE,
        ),
        'msg' => array(
          'description' => 'The chatted message',
          'type' => 'varchar',
          'length' => 1024,
          'not null' => TRUE,
        ),
      ),
    ),
  );

  return $schema;
}
