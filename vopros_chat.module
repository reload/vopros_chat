<?php

/**
 * @file
 * Vopros chat module.
 */

include_once 'vopros_chat.features.inc';

/**
 * Implements hook_menu().
 */
function vopros_chat_menu() {
  $items = array();

  $items['embed/ask-question/chat/%/%'] = array(
    'title' => 'Chat',
    'page callback' => 'vopros_chat_client_page',
    'page arguments' => array(3, 4),
    // @todo access callback should check that chat id is bound to a question.
    'access callback' => TRUE,
    'file' => 'vopros_chat.pages.inc',
    'delivery callback' => 'vopros_embed_deliver_html_page',
  );

  $items['admin/vopros/questions/chat'] = array(
    'title' => 'Chat question list',
    'page callback' => 'vopros_chat_admin_page',
    'page arguments' => array(),
    'access arguments' => array('answer vopros chats'),
    'file' => 'vopros_chat.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/vopros/questions/chat/channels'] = array(
    'title' => 'AHAH callback',
    'page callback' => 'vopros_chat_channels_js',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('answer vopros chats'),
    'theme callback' => 'ajax_base_page_theme',
    'file' => 'vopros_chat.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/vopros/questions/chat/add/%vopros_question'] = array(
    'title' => 'AHAH callback',
    'page callback' => 'vopros_chat_add_chat_js',
    'page arguments' => array(5),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('answer vopros chats'),
    'theme callback' => 'ajax_base_page_theme',
    'file' => 'vopros_chat.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Administrative pages.
  $items['admin/vopros/config/chat'] = array(
    'title' => 'Chat settings',
    'description' => 'Configure chat settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_chat_setting_form'),
    'access arguments' => array('administer vopros_chat'),
    'file' => 'vopros_chat.admin.inc',
  );

  $items['admin/vopros/config/chat/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function vopros_chat_permission() {
  return array(
    'administer vopros_chat' => array(
      'title' => t('Administer chat settings'),
      'description' => '',
    ),
    'answer vopros chats' => array(
      'title' => t('Use chat'),
      'description' => '',
    ),
  );
}

/**
 * Implements hook_entity_insert().
 *
 * When a new chat question is created we log the question to the chat log.
 */
function vopros_chat_entity_insert($entity, $type) {
  global $user;
  if ($type == 'vopros_question' && $entity->user_answer_preference == 'chat') {
    $chat_log = array(
      'timestamp' => $entity->created,
      'question_id' => $entity->question_id,
      'uid' => $user->uid,
      'name' => $entity->user_name,
      'session_id' => '',
      'msg' => $entity->question_content,
    );
    drupal_write_record('vopros_chat_log', $chat_log);
  }
}

/**
 * Implements hook_vopros_question_user_answer_preference().
 *
 * Exposes chat as an user answer preference for questions.
 */
function vopros_chat_vopros_question_user_answer_preference() {
  return array('chat' => t('Chat'));
}

/**
 * Implements hook_theme().
 */
function vopros_chat_theme() {
  $path = drupal_get_path('module', 'vopros_chat') . '/templates';
  return array(
    'vopros_chat_admin_page' => array(
      'render element' => 'elements',
      'path' => $path,
      'template' => 'vopros-chat-admin-page',
    ),
    'vopros_chat_log_activity_feed' => array(
      'render element' => 'log',
      'path' => $path,
      'template' => 'vopros-chat-log-activity-feed',
    ),
    'vopros_chat_log_activity_feed_items' => array(
      'render element' => 'log_items',
      'path' => $path,
      'template' => 'vopros-chat-log-activity-feed-items',
    ),
  );
}

/**
 * Implements hook_views_default_views_alter().
 *
 * On unmodified Question List views we filter out chat questions.
 *
 * If you don't want this filtered set the variable
 * 'vopros_chat_filter_question_list' to FALSE. No need to override the view
 * just for this.
 *
 * Overridden views will be changed on hook_enable().
 *
 * @see vopros_chat_enable()
 */
function vopros_chat_views_default_views_alter(&$views) {
  $enabled = variable_get('vopros_chat_filter_question_list', TRUE);

  if ($enabled && isset($views['vopros_question_list'])) {
    $filter = array(
      'operator' => '!=',
      'value' => 'chat',
    );

    foreach ($views['vopros_question_list']->display as $display) {
      $views['vopros_question_list']->add_item($display->display_plugin, 'filter', 'vopros_question', 'user_answer_preference', $filter, 'vopros_chat_filter');
    }
  }

}

/**
 * Implements hook_vopros_question_activity_feed().
 *
 * Return renderable activity feed item for chat logs.
 */
function vopros_chat_vopros_question_activity_feed($question, &$feed) {
  $feed['vopros_chat_' . $question->question_id] = array(
    '#weight' => 1,
    '#chatlog' => array(
      '#weight' => 1,
      '#log' => vopros_chat_log_load($question->question_id),
      '#theme' => 'vopros_chat_log_activity_feed_items',
    ),
    '#question' => vopros_question_load($question->question_id),
    '#theme' => 'vopros_chat_log_activity_feed',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'vopros_chat') . '/css/vopros_chat.css'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_chat_form_vopros_embed_question_alter(&$form, $form_state) {
  $form['chat_status'] = array(
    '#type' => 'item',
    '#title' => t('Chat status'),
    '#markup' => '<div class="vopros-chat-status">Unknown</div>',
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'vopros_chat') . '/js/vopros_chat_status.js'),
    ),
    '#weight' => -200,
  );
}

/**
 * Load a question chat log.
 *
 * @param int $question_id
 *   The ID of the question to load the log for.
 *
 * @return array
 *   An array of chat log object keyed by timestamp.
 */
function vopros_chat_log_load($question_id) {
  return db_select('vopros_chat_log', 'vcl')
    ->fields('vcl')
    ->condition('question_id', $question_id)
    ->orderBy('timestamp')
    ->execute()
    ->fetchAllAssoc('timestamp');
}

/**
 * Implements hook_views_data_alter().
 *
 * Add an extra field to questions for chat status.
 */
function vopros_chat_views_data_alter(&$data) {
  $data['vopros_question']['chat_status'] = array(
    'title' => t('Chat status'),
    'help' => t('Shows the current status of chat questions.'),
    'field' => array(
      'handler' => 'vopros_chat_handler_field_vopros_quesiton_chat_status',
    ),
  );
}

/**
 * Get path to chat from a question.
 *
 * @param VoprosQuestion $question
 *   The question to chat about.
 *
 * @return string
 *   The local path to the chat.
 */
function vopros_chat_url($question) {
  return 'embed/ask-question/chat/' . $question->question_id . '/' . vopros_chat_get_channel_hash_from_question_id($question->question_id);
}


/**
 * Get channel name from question ID.
 *
 * @param int $question_id
 *   The ID of the question.
 *
 * @return string
 *   The name of the channel associated with the question.
 */
function vopros_chat_get_channel_name_from_question_id($question_id) {
  return 'vopros_chat__' . $question_id . '_' . preg_replace('/[^(_|a-zA-Z0-9)]/', '_', vopros_chat_get_channel_hash_from_question_id($question_id));
}

/**
 * Get channel hash from question ID.
 *
 * @param int $question_id
 *   The ID of the question.
 *
 * @return string
 *   The hash of the channel associated with the question.
 */
function vopros_chat_get_channel_hash_from_question_id($question_id) {
  return hash('sha256', variable_get('nodejs_service_key', '') . $question_id);
}

/**
 * Create a chart config file.
 *
 * You can define overrides in $conf['vopros_chat_config_override'].
 *
 * @return string
 *   File name of the generated config file.
 */
function vopros_chat_create_chat_config() {
  $vopros_chat_extension_path = _vopros_chat_relative_path(drupal_get_path('module', 'nodejs'), drupal_get_path('module', 'vopros_chat') . '/extensions');

  global $is_https;

  $nodejs_config = nodejs_get_config();

  $config = array(
    'scheme' => $nodejs_config['nodejs']['scheme'],
    'port' => $nodejs_config['nodejs']['port'],
    'host' => $nodejs_config['nodejs']['host'],
    'resource' => $nodejs_config['resource'],
    'serviceKey' => $nodejs_config['serviceKey'],
    'backend' => array(
      'port' => $is_https ? 443 : 80,
      'host' => $_SERVER['HTTP_HOST'],
      'scheme' => $is_https ? 'https' : 'http',
      'basePath' => base_path(),
      'messagePath' => 'nodejs/message',
    ),
    'debug' => FALSE,
    'sslKeyPath' => '',
    'sslCertPath' => '',
    'sslCAPath' => '',
    'baseAuthPath' => '/nodejs/',
    'publishUrl' => 'publish',
    'kickUserUrl' => 'user/kick/:uid',
    'logoutUserUrl' => 'user/logout/:authtoken',
    'addUserToChannelUrl' => 'user/channel/add/:channel/:uid',
    'removeUserFromChannelUrl' => 'user/channel/remove/:channel/:uid',
    'addChannelUrl' => 'channel/add/:channel',
    'removeChannelUrl' => 'channel/remove/:channel',
    'setUserPresenceListUrl' => 'user/presence-list/:uid/:uidList',
    'addAuthTokenToChannelUrl' => 'authtoken/channel/add/:channel/:uid',
    'removeAuthTokenFromChannelUrl' => 'authtoken/channel/remove/:channel/:uid',
    'toggleDebugUrl' => 'debug/toggle',
    'contentTokenUrl' => 'content/token',
    'publishMessageToContentChannelUrl' => 'content/token/message',
    'extensions' => array(
      $vopros_chat_extension_path . '/vopros_chat.module.js',
      $vopros_chat_extension_path . '/ssl_passphrase_dialog.js',
    ),
    'clientsCanWriteToChannels' => TRUE,
    'clientsCanWriteToClients' => TRUE,
    'transports' => array('websocket', 'polling'),
    'jsMinification' => TRUE,
    'jsEtag' => TRUE,
    'logLevel' => 1,
  );

  $db_connection = Database::getConnection();
  $config['database'] = $db_connection->getConnectionOptions();
  $config['database_tables'] = array();
  foreach (array('{vopros_chat_log}') as $table) {
    $config['database_tables'][$table] = $db_connection->prefixTables($table);
  };

  // Merge in overrides from $conf['vopros_chat_config_override'].
  $config = variable_get('vopros_chat_config_override', array()) + $config;

  // Create temporary config file.
  $config_file = drupal_tempnam(variable_get('file_temporary_path', '/tmp'), 'vopros_chat_config_');

  file_put_contents($config_file, 'settings = ' . drupal_json_encode($config));

  return $config_file;
}

/**
 * Get a relative path from one file/dir to another.
 *
 * This implementation is borrowed from php.net.
 *
 * @param string $from
 *   The file to derive the relative path from.
 * @param string $to
 *   The file to get the relative path to.
 * @param string $ps
 *   (optional) Directory separator.
 *
 * @return string
 *   The relative path from $from to $to.
 *
 * @see http://dk1.php.net/manual/en/function.realpath.php#105876
 */
function _vopros_chat_relative_path($from, $to, $ps = DIRECTORY_SEPARATOR) {
  $ar_from = explode($ps, rtrim($from, $ps));
  $ar_to = explode($ps, rtrim($to, $ps));
  while (count($ar_from) && count($ar_to) && ($ar_from[0] == $ar_to[0])) {
    array_shift($ar_from);
    array_shift($ar_to);
  }
  return str_pad('', count($ar_from) * 3, '..' . $ps) . implode($ps, $ar_to);
}

/**
 * Admimintrator chat action buttons.
 */
function vopros_chat_admin_chat_actions($form, &$form_state, $question) {
  // We're saving the question id and reloading the question, as this form can
  // be quite long-lived, and the question might be changed in the meantime.
  $form['question_id'] = array(
    '#type' => 'value',
    '#value' => $question->question_id,
  );

  $form['close'] = array(
    '#type' => 'submit',
    '#value' => t('Close as answered'),
    '#ajax' => array(
      'callback' => 'vopros_chat_admin_chat_actions_button_submit',
      'wrapper' => 'vopros-chat-admin-' . $question->question_id,
    ),
    '#question_status' => 'answered',
    '#question_status_reason' => '',
  );

  $form['spam'] = array(
    '#type' => 'submit',
    '#value' => t('Close as spam'),
    '#ajax' => array(
      'callback' => 'vopros_chat_admin_chat_actions_button_submit',
      'wrapper' => 'vopros-chat-admin-' . $question->question_id,
    ),
    '#question_status' => 'closed',
    '#question_status_reason' => 'spam',
  );

  return $form;
}

/**
 * Submit handler.
 *
 * Close question with spam state.
 *
 * @see vopros_chat_admin_chat_actions().
 */
function vopros_chat_admin_chat_actions_button_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $question = vopros_question_load($form_state['values']['question_id']);
  if ($question) {
    // Change status.
    $question->question_status = $button['#question_status'];
    $question->question_status_reason = $button['#question_status_reason'];
    $question->save();

    // Send message to the client to disable input.
    $message = (object) array(
      'type' => 'vopros_chat',
      'action' => 'chat_close',
      'channel' => vopros_chat_get_channel_name_from_question_id($question->question_id),
      'callback' => 'closeChannelHandler',
      'data' => array(
        'msg' => variable_get('vopros_chat_closed_message', 'Chat closed'),
      ),
    );
    nodejs_send_message($message);
  }

  // Contrary to what the docs say, ajax_command_remove() doesn't use the
  // wrapper set on the triggering element.
  $commands = array(
    ajax_command_remove('#vopros-chat-admin-' . $form_state['values']['question_id']),
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}
